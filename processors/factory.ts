import { renownProfileProcessorFactory } from "./renown-profile/factory.js";
/**
 * This file aggregates all processor factories
 * Auto-generated by codegen - DO NOT EDIT MANUALLY
 */

import {
  type IProcessorHostModule,
  type ProcessorRecord,
} from "document-drive/processors/types";

// Import other processor factories here as they are generated
import { type PHDocumentHeader } from "document-model";
import { vetraReadModelProcessorFactory } from "./vetra-read-model/factory.js";

export const processorFactory = (module: IProcessorHostModule) => {
  // Initialize all processor factories once with the module
  const factories: Array<
    (driveHeader: PHDocumentHeader) => Promise<ProcessorRecord[]>
  > = [];
  // Add other processors here as they are generated
  factories.push(vetraReadModelProcessorFactory(module));
  factories.push(renownProfileProcessorFactory(module));

  // Return the inner function that will be called for each drive
  return async (driveHeader: PHDocumentHeader): Promise<ProcessorRecord[]> => {
    const processors: ProcessorRecord[] = [];

    // Call each cached factory with the driveId
    for (const factory of factories) {
      const factoryProcessors = await factory(driveHeader);
      processors.push(...factoryProcessors);
    }

    return processors;
  };
};
